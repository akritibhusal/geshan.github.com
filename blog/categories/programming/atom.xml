<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: programming | Geshan's Blog]]></title>
  <link href="https://geshan.com.np/blog/categories/programming/atom.xml" rel="self"/>
  <link href="https://geshan.com.np/"/>
  <updated>2019-11-01T00:23:21+00:00</updated>
  <id>https://geshan.com.np/</id>
  <author>
    <name><![CDATA[Geshan Manandhar]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Set up Laravel 6 on Google Cloud Run step by step with Continuous Integration (CI)]]></title>
    <link href="https://geshan.com.np/blog/2019/10/get-laravel-6-running-on-google-cloud-run-step-by-step-with-ci/"/>
    <updated>2019-10-21T08:03:29+00:00</updated>
    <id>https://geshan.com.np/blog/2019/10/get-laravel-6-running-on-google-cloud-run-step-by-step-with-ci</id>
    <content type="html"><![CDATA[<p>Laravel has <a href="https://trends.google.com/trends/explore?date=2014-10-22%202019-10-21&amp;q=laravel,symfony">soared</a> in popularity in the last few years. The Laravel community even says that Laravel has made writing PHP enjoyable than a pain. Laravel 6 has some interesting new <a href="https://laracasts.com/series/whats-new-in-laravel-6">features</a>. Getting a super scaleable working URL for your application take hours if not days. Setting up something like Kubernetes is a huge task. This is where Google Cloud Run shines, you can get a working HTTPs URL for any of your containerized app in minutes.</p>

<p><a href="https://cloud.google.com/run/">Google Cloud Run</a> is serverless and fully managed by Google, you get super scale, billing by the second, HTTPs URL and your own domain mapping. If you want to run stateless containers Cloud run is hands down the easiest way to do it. In this post, I will detail how to get your Laravel 6 app working on Google cloud run with Continous Integration (CI).</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/00laravel6-on-gcr.jpg" title="Get Laravel 6 running on Google cloud run in minutes with CI" alt="Get Laravel 6 running on Google cloud run in minutes with CI"></p>

<!-- more -->


<h2>Prerequisites</h2>

<ul>
<li>You are familiar with PHP/Composer and aware of Laravel (if you&rsquo;ve landed here you are I suppose)</li>
<li>You know how to use Git from the CLI</li>
<li>Your code is hosted on GitHub for CI/CD and you are familiar with GitHub</li>
<li>Know a fair bit of docker, maybe even multi-stage build</li>
<li>Have a working Google cloud account (they give you <a href="https://cloud.google.com/free/">$300 credit</a> free for 1 yr, no reasons not to have an account)</li>
</ul>


<h2>Why is Cloud Run a great option for beginners</h2>

<p>For two reasons as mentioned below</p>

<ol>
<li>Learn about the best practices and software like docker and CI/CD</li>
<li>Getting the basics going is click a button, select 2 things wait for 5 mins you get a working HTTPs URL. Can it be any easier than this :)</li>
</ol>


<h2>Steps to deploy</h2>

<p>Below are the steps to set up and deploy Laravel 6 on Cloud Run:</p>

<h3>1. Clone Laravel or new Laravel project</h3>

<p>Start by cloning Laravel or using composer or the Laravel CLI as indicated in the official <a href="https://laravel.com/docs/5.8/installation">installation</a> guide. I am using composer to get the latest Laravel as below:</p>

<h4>Command</h4>

<p>I ran the following command to get the latest laravel:</p>

<pre><code class="bash">composer create-project --prefer-dist laravel/laravel laravel6-on-google-cloud-run
</code></pre>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/01install-laravel.jpg" title="Installing Laravel with composer" alt="Installing Laravel with composer"></p>

<h3>2. Test it locally first</h3>

<p>Then run <code>cd laravel6-on-google-cloud-run</code> then <code>php artisan serve</code> to see if it is working, for me it was fine when I went to <code>http://localhost:8000</code> on a web browser. I had PHP 7.2 installed locally.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/02running-laravel.jpg" title="Running Laravel locally" alt="Running Laravel locally"></p>

<h3>3. Create a new GitHub repo</h3>

<p>Create a new repository on Github like below:</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/03github-repo.jpg" title="Creating a repo for Laravel on Github" alt="Creating a repo for Laravel on Github"></p>

<p>You can use any Git hosting provider, for this example I will be using <a href="https://github.com/features/actions">Github Actions</a> to run tests and Github is the most popular git hosting too.</p>

<h3>4. Add repo, push readme</h3>

<p>Now after you have the repo created, add it to your local Laravel copy and push the Readme file. To do this
run the following commands on your cli:</p>

<pre><code>git init
code . # I used VS code to change the readme
git add readme.md
git commit -m "Initial commit -- App Readme"
git remote add origin git@github.com:geshan/laravel6-on-google-cloud-run.git
git push -u origin master
</code></pre>

<h4>After running the above commands I had this on my github repo</h4>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/04initial-push.jpg" title="After the first push, repo looks like this" alt="After the first push, repo looks like this"></p>

<h3>5. Add full Laravel, open PR</h3>

<p>Now let&rsquo;s add the whole app as a PR to the Github repo by executing the following commands:</p>

<pre><code class="bash">git checkout -b laravel6-full-app
git add .gitignore
git add .
git commit -m "Add the whole Laravel 6 app"
git push origin laravel6-full-app
</code></pre>

<p>After that go and open a Pull Request (PR), on the repo like <a href="https://github.com/geshan/laravel6-on-google-cloud-run/pull/1">this</a> one. You might be thinking I am the only one working on this, why
do I need a PR? Well, it is always better to do things methodically even if it is just one person working on the project :).</p>

<p>After that merge your pull request.</p>

<h3>6. Setup tests with <a href="https://github.com/features/actions">GitHub actions</a></h3>

<p>Not some fun part, after you merged your PR now Github knows that this is a Laravel project. Click on  <code>Actions</code> tab on your repo page and you should be able to see something like below:</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/05github-actions.jpg" title="Click Actions tab to view options" alt="Click Actions tab to view options"></p>

<p>Click the <code>Set up this workflow</code> under <code>Laravel</code> then on the next page click <code>Start commit</code> button on the top right. After that add a commit message like below and click <code>Commit new file</code>.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/06gh-actions-ci.jpg" title="Add Laravel tests action" alt="Add Laravel tests action"></p>

<p>There you go, you have your CI setup. Laravel default tests will run on each git push now. Wasn&rsquo;t that easy? Thank Github for this great intelligence. No more creating <code>.myCIname.yml</code> file anymore :).</p>

<h3>7. Add docker and docker-compose to run app locally</h3>

<p>Now let&rsquo;s add docker and docker-compose to run the app locally without PHP or artisan serve. We will need the container to run Laravel on Google Cloud Run too. This part is inspired by <a href="https://nsirap.com/posts/010-laravel-on-google-cloud-run/">Laravel on Google Cloud Run</a> post by Nicolas. If you want to learn more about <a href="https://www.docker.com/">Docker</a> and Laravel please refer to this <a href="https://geshan.com.np/blog/2015/10/getting-started-with-laravel-mariadb-mysql-docker/">post</a>.</p>

<p>Run the following commands first to get your master up to date as we added the <code>workflow</code> file from Github interface:</p>

<pre><code>git checkout master
git fetch
git pull --rebase origin master # as we added the workflow file from github interface
git checkout -b docker
</code></pre>

<p>Add a key to the <code>.env.example</code> file, copy it from <code>.env</code> file like below:</p>

<pre><code>APP_NAME=Laravel
APP_ENV=local
APP_KEY=base64:DJkdj8L5Di3rUkUOwmBFCrr5dsIYU/s7s+W52ClI4AA=
APP_DEBUG=true
APP_URL=http://localhost
</code></pre>

<p>As this is just a demo this is ok to do, for a real app always be careful with secrets.
For production-ready apps do turn of the debugging and other dev related things.</p>

<p>Add the following <code>Dockerfile</code> on the project root:</p>

<pre><code>FROM composer:1.9.0 as build
WORKDIR /app
COPY . /app
RUN composer global require hirak/prestissimo &amp;&amp; composer install

FROM php:7.3-apache-stretch
RUN docker-php-ext-install pdo pdo_mysql

EXPOSE 8080
COPY --from=build /app /var/www/
COPY docker/000-default.conf /etc/apache2/sites-available/000-default.conf
COPY .env.example /var/www/.env
RUN chmod 777 -R /var/www/storage/ &amp;&amp; \
    echo "Listen 8080" &gt;&gt; /etc/apache2/ports.conf &amp;&amp; \
    chown -R www-data:www-data /var/www/ &amp;&amp; \
    a2enmod rewrite
</code></pre>

<p>Then add the following file at <code>docker/000-default.conf</code></p>

<pre><code>&lt;VirtualHost *:8080&gt;

    ServerAdmin webmaster@localhost
    DocumentRoot /var/www/public/

    &lt;Directory /var/www/&gt;
      AllowOverride All
      Require all granted
    &lt;/Directory&gt;

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

&lt;/VirtualHost&gt;
</code></pre>

<p>After that add the following <code>docker-compose.yml</code></p>

<pre><code>version: '3'
services:
  app:
    build:
      context: ./
    volumes:
      - .:/var/www
    ports:
      - "8080:8080"
    environment:
      - APP_ENV=local
</code></pre>

<h4>Boil down to main things</h4>

<p>If you try to understand everything here it might be overwhelming, let me boil down the main parts:</p>

<ol>
<li>We are using the official PHP Apache docker image to run Laravel, it has PHP version 7.3.</li>
<li>We are using multistage build to get the dependencies with Composer then copying them to the main docker image that has PHP 7.3 and Apache.</li>
<li>As Google Cloud Run requires the web-server to be listening to port <code>8080</code> we are using <code>000-default.conf</code> to configure this</li>
<li>To make things easy to run with single command <code>docker-compose up</code> we are using docker-compose.</li>
<li>Now as you have read this far, run <code>docker-compose up</code> on your root and then after everything runs go to <code>http://localhost:8080</code> to see that Laravel 6 is running locally on Docker. Below is my <code>docker-compose up</code> output towards the end:</li>
</ol>


<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/07docker-compose-output.jpg" title="Docker compose running Laravel with PHP 7.3 and Apache" alt="Docker compose running Laravel with PHP 7.3 and Apache"></p>

<p>As Laravel is running fine with Docker, let&rsquo;s open a PR like <a href="https://github.com/geshan/laravel6-on-google-cloud-run/pull/2/files">this</a> one to add Docker to our project. I ran the following commands on the root of the project before opening the Pull Request (PR):</p>

<pre><code>git status
</code></pre>

<p>It should give you something like below:</p>

<pre><code>On branch docker
Untracked files:
  (use "git add &lt;file&gt;..." to include in what will be committed)

    Dockerfile
    docker-compose.yml
    docker/

nothing added to commit but untracked files present (use "git add" to track)
</code></pre>

<p>Now run the following commands:</p>

<pre><code>git add .
git commit -m "Add docker and docker compose"
git push origin docker
</code></pre>

<p>As a bonus it will run the Laravel default test on the push, like you can see below:</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/08test-running-gh.jpg" title="On each push PHP unit test will run" alt="On each push PHP unit tests will run"></p>

<p>Only the owner of the repo has access to the <code>Actions</code> tab so other people don&rsquo;t necessarily need to know the results of your test builds :).</p>

<h3>8. Add deploy to <a href="https://github.com/GoogleCloudPlatform/cloud-run-button">Google Cloud button</a></h3>

<p>Now let&rsquo;s deploy this Laravel setup to Google Cloud Run the easy way. Given you have merged your PR from the <code>docker</code> branch. Let&rsquo;s run the following commands:</p>

<pre><code>git checkout master
git fetch
git pull --rebase origin master
git checkout -b cloud-run-button
</code></pre>

<p>Then add the following to your <code>readme.md</code> file:</p>

<pre><code>### Run on Google cloud run

[![Run on Google Cloud](https://storage.googleapis.com/cloudrun/button.svg)](https://console.cloud.google.com/cloudshell/editor?shellonly=true&amp;cloudshell_image=gcr.io/cloudrun/button&amp;cloudshell_git_repo=https://github.com/geshan/laravel6-on-google-cloud-run.git)
</code></pre>

<p>Be careful and replace the last part with your repo&rsquo;s <code>HTTPs</code> URL, for example, if your repo is at <code>https://github.com/ghaleroshan/laravel6-on-google-cloud-run</code> it will be <code>https://github.com/ghaleroshan/laravel6-on-google-cloud-run.git</code>, then commit and push. Your PR should look something like <a href="https://github.com/geshan/laravel6-on-google-cloud-run/pull/3/files">this</a> one.</p>

<h3>9. Deploy on Google Cloud Run</h3>

<p>After you merge your Pull Request (PR), then go to your repo page and click on the <code>Run on Google Cloud</code> button.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/09cloud-run-button.jpg" title="Click on the blue button to deploy the app" alt="Click on the blue button to deploy the app"></p>

<p>After that, given you are logged into your Google account and have Google cloud setup with 1 project, click &ldquo;Proceed&rdquo;. You might need to wait a bit, Then</p>

<ol>
<li>Choose the project &ndash; <code>Choose a project to deploy this application</code></li>
<li>Choose the region &ndash; <code>Choose a region to deploy this application</code>, I usually go with <code>us-central-1</code></li>
<li>Then wait for the container to be built and deployed, you can see my process below:</li>
</ol>


<p>If everything goes fine on your <code>Google Cloud Shell</code>, you will see HTTPs URL you can hit to see your
Laravel app running like below:</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/10laravel-running-gcr.jpg" title="Hit the given URL to see its running" alt="Hit the given URL to see its running"></p>

<p>What just happened above is:</p>

<ol>
<li>After choosing the region, the script built a docker container image from the <code>Dockerfile</code> in the repo</li>
<li>Then it pushed the built image to <a href="https://cloud.google.com/container-registry/">Google Container Registry</a></li>
<li>After that using the <a href="https://cloud.google.com/sdk/gcloud/">gcloud</a> CLI it deployed the built image to Cloud Run, which gave back the URL.</li>
</ol>


<h3>10. Hurray, your app is working</h3>

<p>After you git the URL you should see your app working on Google Cloud Run like below:</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/11laravel-url.jpg" title="Laravel Running on Google Cloud Run" alt="Laravel Running on Google Cloud Run"></p>

<p>If you want to deploy another version you can merge your PR to master and click the button again to deploy.</p>

<h2>More about Google Cloud Run</h2>

<p>The <a href="https://cloud.google.com/run/pricing">pricing</a> for Google Cloud Run is very generous. You can run any containerized app or web app on Google cloud run. I ran a pet project that got ~ 1 request per minute and I did not have to pay anything.</p>

<p>Behind the scenes, it is using <a href="https://cloud.google.com/knative/">Knative</a> and <a href="https://kubernetes.io/">Kubernetes</a>. It can also be run on your Kubernetes cluster but who would choose to manage a K8s cluster if you can just push and get scaleable serverless fully managed app :).</p>

<h2>TLDR</h2>

<p>To run Laravel 6 on Google Cloud Run quickly follow the steps below:</p>

<ol>
<li>Make sure you are logged into your <a href="https://console.cloud.google.com/">Google Cloud Account</a></li>
<li>Go to <a href="https://github.com/geshan/laravel6-on-google-cloud-run">https://github.com/geshan/laravel6-on-google-cloud-run</a></li>
<li>Click the &ldquo;Run On Google Cloud&rdquo; blue button</li>
<li>Select your project</li>
<li>Select your region</li>
<li>Wait and get the URL of your Laravel App as below, Enjoy!</li>
</ol>


<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/10laravel-running-gcr.jpg" title="Hit the given URL to see its running" alt="Hit the given URL to see its running"></p>

<hr />

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/laravel6-on-google-cloud-run/11laravel-url.jpg" title="Laravel Running on Google Cloud Run" alt="Laravel Running on Google Cloud Run"></p>

<h2>Conclusion</h2>

<p>There you go running a Laravel app on Google cloud run was pretty easy. You have even got test running on Github with Github actions. Hope it helps. To do a CI/CD approach you can check this <a href="https://medium.com/google-cloud/simplifying-continuous-deployment-to-cloud-run-with-cloud-build-including-custom-domain-setup-ssl-22d23bed5cd6">post</a>, it shows deployment using Cloud build. As the same container is running for local and production (Google Cloud Run) environment you don&rsquo;t need to learn a new framework to go Serverless.</p>

<blockquote><p>Any containerized web app can be run on Google Cloud Run, it is a great service.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Podcasts Every Software Engineer/developer Should Subscribe To - Part 4]]></title>
    <link href="https://geshan.com.np/blog/2019/07/podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-4/"/>
    <updated>2019-07-08T04:58:14+00:00</updated>
    <id>https://geshan.com.np/blog/2019/07/podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-4</id>
    <content type="html"><![CDATA[<p>Podcasts are a great way to learn new things even for the lazy reader. If you are not fast at reading or don&rsquo;t like it very much podcasts can be your way to get the information with less effort. It is easier than reading. This is a part 4 in the series (do check part <a href="http://geshan.com.np/blog/2015/10/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to/">1</a> and
<a href="http://geshan.com.np/blog/2016/05/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-2/">2</a> and <a href="https://geshan.com.np/blog/2017/01/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-3/">3</a>) of podcasts you must subscribe to and listen to as a software engineer. Same as the last 3 times the 3 podcasts listed below have great content and considerably good sound quality too. Below is the list:</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-4/3-podcasts-sw-eng-part-04.jpg" title="3 podcasts every software engineer should subscribe to - part 4" alt="3 podcasts every software engineer should subscribe to - part 4"></p>

<!-- more -->


<h2><a href="https://spec.fm/podcasts/developer-tea">Developer Tea by Jonathan</a></h2>

<p>Developer Tea is an exceptional podcast to listen to. Jonathan sometimes does an interview and most of the times it is a discourse on software engineering related topics. A recent episode on <a href="https://spec.fm/podcasts/developer-tea/302953">Mid-Year Resolutions</a> was a strong reminder that half of the year is gone and in less than six months we will reach 2020.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-4/developer-tea.jpg" title="Developer Tea Podcast" alt="Developer Tea Podcast"></p>

<h2><a href="http://agilenoir.biz/agilethoughts/">Agile Thoughts by Agile Noir</a></h2>

<p>Simply put Agile thought is an unconventional podcast. Don’t be scared by the unusual looking cover of the podcast, the content is good. Mostly conversational with some characters, the episodes are short and address day to day issues. I remember episode 29 <a href="https://agilenoir.biz/podcast/029-the-value-tdd-gives-to-leadership/">The value TDD gives to leadership</a> being an intriguing one.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-4/agile-thoughts.jpg" title="Agile Thoughts Podcast" alt="Agile Thoughts Podcast"></p>

<h2><a href="https://www.intercom.com/blog/podcasts/">Inside Intercom</a></h2>

<p>Inside intercom is a superb podcast focusing on the product side of things rather than just the technical aspects. The most recent episode on <a href="https://www.intercom.com/blog/podcasts/josh-seiden-on-why-product-teams-should-focus-on-outcome-vs-output/">why product teams should focus on outcomes over output</a> was an eye-opener.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-4/inside-intercom.jpg" title="Inside Intercom Podcast" alt="Inside Intercom Podcast"></p>

<h2>Conclusion</h2>

<blockquote><p>I hope you continue your learning journey with the above interesting podcasts. Keep learning!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Podcasts Every Software Engineer/developer Should Subscribe To - Part 3]]></title>
    <link href="https://geshan.com.np/blog/2017/01/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-3/"/>
    <updated>2017-01-04T05:47:54+00:00</updated>
    <id>https://geshan.com.np/blog/2017/01/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-3</id>
    <content type="html"><![CDATA[<p>Podcasts open up a new horizon for learning, it is easier than reading and you can do it while commuting. This is a part 3 in the series (do check part <a href="http://geshan.com.np/blog/2015/10/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to/">1</a> and
<a href="http://geshan.com.np/blog/2016/05/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-2/">2</a>) of podcasts you must subscribe to and listen to as a software engineer. Same as the last 2 times the 3 podcasts listed below have superb content and amazing sound quality too. Below is the list:</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-3/3-podcasts-sw-eng-part-03.jpg" title="3 podcasts every software engineer should subscribe to - part 3" alt="3 podcasts every software engineer should subscribe to - part 3"></p>

<!-- more -->


<h2><a href="http://www.heavybit.com/library/podcasts/to-be-continuous/">To Be Continuous by Heavybit</a></h2>

<p>This is a gem of a podcast. Hosted by Paul and Edith it has the right mix of technical and non-technical content.
Paul is the co-founder of Circle CI and Edith is the co-founder of LaunchDarkly. Together they make a great pair.
They put forward their ideas about continuous delivery and software engineering topics.
Sometimes they even bring in guests which is like a cherry on the cake. The last episode #28 on <a href="http://www.heavybit.com/library/podcasts/to-be-continuous/ep-28-goal-setting/">Goal setting</a> was amazing.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-3/to-be-continuous.jpg" title="To Be Continuous Podcast" alt="To Be Continuous Podcast"></p>

<h2><a href="http://www.gistia.com/techpeople/">Tech People by Gistia Labs</a></h2>

<p>In-depth interviews is what tech people by Gistia Labs podcast excels on. They bring in leaders from the
tech industry to discuss topics from Angular in the enterprise to UX for Lean startup.
The interviews are a bit long, still they are insightful and relay important information.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-3/tech-people.jpg" title="Tech People Podcast" alt="Tech People Podcast"></p>

<h2><a href="https://mixergy.com/interviews/">Mixergy by Andrew</a></h2>

<p>Another admirable podcast is Mixergy hosted by <a href="http://www.andrewwarner.com/">Andrew Warner</a>.
With over a 1000 interviews with proven entrepreneurs, he knows how to ask the right questions.
Andrew sometimes elicits such insightful information out of his guest. It is intriguing how he does it.
If you ever want to learn how to interview people this is one podcast you can&rsquo;t afford do miss.
He generally interviews tech entrepreneurs. The interviews usually last like an hour.
You even as a software engineer get to know important things about how to run a business.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-3/mixergy.jpg" title="Mixergy Podcast" alt="Mixergy Podcast"></p>

<blockquote><p>I hope you had a great start to the new year and continue your learning listening to amazing podcasts. Cheers!</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[3 Podcasts Every Software Engineer/developer Should Subscribe To - Part 2]]></title>
    <link href="https://geshan.com.np/blog/2016/05/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-2/"/>
    <updated>2016-05-03T05:29:42+00:00</updated>
    <id>https://geshan.com.np/blog/2016/05/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-2</id>
    <content type="html"><![CDATA[<p>Listening to podcasts is a good way to learn new things. Like the last <a href="http://geshan.com.np/blog/2015/10/3-podcasts-every-software-engineer-slash-developer-should-subscribe-to/">time</a>, I have found some more podcasts
with amazing content and sound quality. In this post, I will list 3 awesome podcasts.
All software engineers/developers should subscribe to them now.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-2/3-podcasts-sw-eng-part-02.jpg" title="3 podcasts every software engineer should subscribe to - part 2" alt="3 podcasts every software engineer should subscribe to - part 2">
(Background image shot by me)</p>

<!-- more -->


<h2><a href="http://softwareengineeringdaily.com/category/podcast/">Software Engineering Daily</a></h2>

<p>Software engineering daily is a daily podcast hosted by <a href="http://jeffmeyerson.com/">Jeff Meyerson</a>.<br/>
He has worked at Amazon and knows what he is talking about. T
he interviews are in-depth, long and enjoyable. Jeff is sharp, there is never a
dull moment in the one to one interviews he conducts. He covers a wide range of subjects from docker/kubernates
to logging and git.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-2/software-engineering-daily-podcast.jpg" title="Software Engineering Daily podcast" alt="Software Engineering Daily podcast"></p>

<h2><a href="https://scaleyourcode.com/interviews">Scale your code</a></h2>

<p>Christophe Limpalair hosts Scale your code podcast. A new episode usually arrives every 15 days. He also interviews known
tech personalities. The podcast covers a wide array of topics from open source to performance. This podcast informs
how the big players deal with scaling and performance problems.</p>

<blockquote><p>Scale Your Code&rsquo;s mission is to organize the world&rsquo;s programming knowledge from top sources and make it universally
accessible to improve software security, speed, and reliability.</p></blockquote>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-2/scale-your-code-podcast.jpg" title="Scale your code podcast" alt="Scale your code podcast"></p>

<h2><a href="http://www.scrum-master-toolbox.com/category/podcast/">Scurm Master Toolbox</a></h2>

<p>Scrum master toolbox podcast is another daily podcast with a theme for each weekday. Vasco Duarte hosts this podcast.
He conducts the interviews with ease and a purpose to get the best out of his guests. Regardless of you do scrum or not
this will help you in your career. Software engineers are solution providers. Understanding team dynamics, product
management and change management is important in our work life.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/3-podcasts-part-2/scrum-master-toolbox-podcast.jpg" title="Scurm Master Toolbox podcast" alt="Scurm Master Toolbox podcast"></p>

<blockquote><p>For this time it was all podcasts with one on one interviews. Hope you like them and it helps you expand your tech horizon.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[There are only two types of automated software tests, fast ones and not fast ones]]></title>
    <link href="https://geshan.com.np/blog/2016/03/there-are-only-two-types-of-automated-software-tests/"/>
    <updated>2016-03-17T05:38:18+00:00</updated>
    <id>https://geshan.com.np/blog/2016/03/there-are-only-two-types-of-automated-software-tests</id>
    <content type="html"><![CDATA[<p>Tests check that the code does what it is expected to do. It also gives confidence to the software engineer that the code
works as intended. This equates to less or no bugs in the software. You must have heard about lots of types of automated software tests.
There is unit testing, integration testing, functional testing, acceptance testing, smoke testing etc.
As per Guru99&rsquo;s <a href="http://www.guru99.com/types-of-software-testing.html">post</a> there are more than 100 types of
software testing. In this post I am going to categorize automated software tests into two, the fast ones and not fast ones.</p>

<p><img class="center" src="https://geshan.com.np/images/generic/loading.gif" data-echo="/images/testing-types/software-testing.jpg" title="There are only two types of automated software tests, fast ones and not fast ones" alt="There are only two types of automated software tests, fast ones and not fast ones"></p>

<!-- more -->


<h3>How do you distinguish between slow and fast tests?</h3>

<p>Generally, if your whole tests suite runs in seconds it is fast.
If your whole test suite runs in minutes/hour it is slow. To make your tests small you need to make your application small.
As faster tests running on your Continuous Integration (CI) service will give you faster feedback.
May be it is time to go micro-services?</p>

<p>Lets discuss the more about fast and not fast (slow) automated software tests.</p>

<h3>The fast tests</h3>

<p>Fast tests are code that test one unit of code generally a method. Unit test is a type of fast test.
They don&rsquo;t depend on any external dependencies. External dependencies include file system, database, web server, network
or any third party API or service. Unit tests even mock the other code elements they need like other classes and its methods.
This makes the test focused on one unit and they run in milliseconds/seconds not minutes. A simple example is below:</p>

<script src="http://gist-it.appspot.com/http://github.com/geshan/dataprovider-example/blob/master/tests/DataProvider/Example/Test/CheckoutTest.php"></script>


<p>You can view the full code <a href="http://github.com/geshan/dataprovider-example">here</a>, yes it is a simple class with no code or external dependency.</p>

<p>Some integration tests can also be fast tests. These integration tests can test many classes. They should not
dependent on any external dependencies mentioned above to obtain speed. So these tests will still run in seconds and
not take minutes to finish.</p>

<h3>The not fast tests (slow ones)</h3>

<p>Any test that takes long to run are not fast tests (slow tests). Generally, these type of tests need to load
the whole application to test it. These types of tests depend on external dependencies. External dependencies include file
system, database, web server, network, third party API or service.</p>

<p>Acceptance tests that need to load a full web application on a browser is a type of slow tests. Even smoke tests if it needs
to load the whole application and takes long time to execute fall in this category.</p>

<script src="https://gist.github.com/geshan/4512326704954f6b8388.js"></script>


<p>The above example is taken from <a href="https://github.com/Sylius/Sylius/blob/master/features/checkout/checkout_with_offline_payment.feature">Sylius</a>
project, to test checkout with offline payment method on the browser.</p>

<h3>Conclusion</h3>

<p>Testing is super important for a robust software application. Automated testing + CI is one of the <a href="http://geshan.com.np/blog/2015/10/4-pillars-of-a-solid-software-application-and-tools-to-support-it/">four pillars</a>
of any solid software application. Happy testing hope your tests run in seconds not minutes.</p>
]]></content>
  </entry>
  
</feed>
